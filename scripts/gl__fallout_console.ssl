/*
    Global script for the Fallout 2 ~ console by Mrowr Purr

    This must run before all other scripts so that it
    can register the handler for `register_console_proc`
    to work when called from other mods.

    Do not try to include this script in yours mods,
    there is no need. Instead #include "Console.h".
*/

#include "Console.h" // <--- header used by modders to register new console commands
                     //      but we also include useful #defines and procs for
                     //      interacting with the console, show/hiding it, etc!

#include "sfall/dik.h"
#include "sfall/sfall.h"

#define DEFAULT_CONSOLE_KEYCODE 41 // ~ key on US QWERTY

variable is_shift_pressed; // because key_pressed() doesn't capture shift on pressed, only released, but we need to use pressed to override the key press
variable toggle_console_keycode = DEFAULT_CONSOLE_KEYCODE;

procedure on_console_command_execution begin

end

procedure on_console_command_registration begin

end

// int     arg0 - event type: 1 - pressed, 0 - released
// int     arg1 - key DX scancode
// int     arg2 - key VK code (very similar to ASCII codes)
// int     ret0 - overrides the pressed key (a new key DX scancode or 0 for no override)
procedure on_keypress begin
    variable pressed       = get_sfall_arg,
             keycode       = get_sfall_arg;

    if keycode == DIK_LSHIFT or keycode == DIK_RSHIFT then begin
        is_shift_pressed = pressed;
        return;
    end

    if pressed then begin

        if keycode == toggle_console_keycode then
            call ConsoleUI_ToggleOpen;

        else begin

            variable console_data = get_console_data_array;

            if console_data and console_data.visible then begin

                if keycode == 1 then begin // Escape
                    call ConsoleUI_Hide;

                end else begin
                    variable keymap = get_console_keymap_array;
                    variable str_keycode = sprintf("%s", keycode);

                    if map_contains_key(keymap.keys, str_keycode) then begin

                        variable character;
                        if is_shift_pressed then
                            character = substr(keymap.keys[str_keycode], 1, 1);
                        else
                            character = substr(keymap.keys[str_keycode], 0, 1);
                        
                        call ConsoleUI_TypeText(character);

                    end else if map_contains_key(keymap.special_keys, str_keycode) then begin
                        variable special_key = keymap.special_keys[str_keycode];
                        switch special_key begin
                            case "SPACE": call ConsoleUI_TypeText(" ");
                            case "DEL": begin
                                console_data.command_text = substr(console_data.command_text, 0, strlen(console_data.command_text) - 2);
                                call ConsoleUI_Refresh;
                            end
                            case "TAB": display_msg("TODO TAB");
                            case "ENTER": call ConsoleUI_ExecuteCurrentCommand;
                            case "HOME": display_msg("TODO HOME");
                            case "END": display_msg("TODO END");
                            case "UP": display_msg("TODO UP");
                            case "DOWN": display_msg("TODO DOWN");
                            case "LEFT": display_msg("TODO LEFT");
                            case "RIGHT": display_msg("TODO RIGHT");
                            case "PGUP": display_msg("TODO PGUP");
                            case "PGDN": display_msg("TODO PGDN");
                            default: display_msg("DEFAULT SPECIAL KEY UNHANDLED " + keycode);
                        end
                    end
                end

                set_sfall_return(255); // pick a key that does nothing!
            end
        end
    end
end

procedure load_config begin
    variable console_shortcut = get_ini_setting(CONSOLE_INI_FILEPATH "|Shortcuts|iConsole");
    if console_shortcut then toggle_console_keycode = console_shortcut;
end

procedure start begin
    if game_loaded then begin
        AddNamedHandler("_console_register_command_", on_console_command_registration);
        AddNamedHandler("_console_command_run_", on_console_command_execution);
        set_global_script_type(1); // 1 = UI script
        call load_config;
        register_hook_proc(HOOK_KEYPRESS, on_keypress);
    end
end
